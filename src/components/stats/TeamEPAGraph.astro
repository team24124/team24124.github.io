---
import TeamSelector from "./EPATypeSelector.astro";
import EPATypeSelector from "./EPATypeSelector.astro";
import '../../styles/graph.css'
---

<div>
	<div class="selectors">
		<p>	Displaying Teams: </p>
		<TeamSelector client:load/>
	</div>
    <div id="graph"></div>
</div>

<script>
	import { type TeamData, parseTeamData } from "../../scripts/TeamData";
	import Plotly, { type Data, type TypedArray } from "plotly.js-dist-min";
	import { type EPASelectorState } from "./EPATypeSelector.astro";
	import json from "../../data/Alberta_team_data.json";

	var teams: TeamData[] = [parseTeamData(json, "24124"), parseTeamData(json, "26145")]
	var modes: EPASelectorState = { totalEPAEnabled: true, autoEPAEnabled: false, teleEPAEnabled: false }

	// By default create a plot with our teams on it
	makePlot("Historical EPA", teams);


	window.addEventListener('teamSelectionUpdate', (e) => {
		const event = e as CustomEvent<TeamData[]>
		teams = event.detail;
		makePlot('Historical EPA', teams)
	});

	window.addEventListener('epaSelectionUpdate', (e) => {
		const event = e as CustomEvent<EPASelectorState>
		modes = event.detail;
		makePlot("Historical EPA", teams)
	})


	function formatTitle(teams: TeamData[]): string{
		if(teams.length <= 0) return "";

		var title = teams[0].team_number.toString();

		teams.slice(1).forEach((team) => {
			title += ` vs. ${team.team_number}`;
		})
	
		console.log(title.length)
		// Cutoff for ellipses
		if(title.length >= 80){
			title = title.substring(0, 80) + "..."
		}

		return title;
	}

	function getDefaultTrace(name: string, data: any[]): Data {
		return {
			type: 'scatter',
			y:data,
			mode: 'lines',
			name: name
		}
	}

	function makePlot(title: string, data: TeamData[]) {

		var layout = {
			title: {
				text: `${title} ${formatTitle(data)}`
			},
			xaxis: {
				title: {
					text: "Matches Played",
				},
				fixedrange: true
			},
			yaxis: {
				title: {
					text: "Expected Points Added (EPA)",
				},
				fixedrange: true
			},
			showlegend: true
		};

		var config = {responsive: true}
	
		// Return empty plot if there is no data
		if(data.length == 0) {
			return Plotly.newPlot('graph', [], layout, config);
		}

		var generalTraces: Data[] = [], autoTraces: Data[] = [], teleTraces: Data[] = [];
		
		data.forEach((dataSet) => {
			let team = dataSet.team_number.toString();

			if(modes.totalEPAEnabled) generalTraces.push(getDefaultTrace(`${team} Total EPA`, dataSet.historical_epa))
			if(modes.autoEPAEnabled) autoTraces.push(getDefaultTrace(`${team} Auto EPA`, dataSet.historical_auto_epa))
			if(modes.teleEPAEnabled) teleTraces.push(getDefaultTrace(`${team} TeleOp EPA`, dataSet.historical_tele_epa))
		});
				
		return Plotly.newPlot('graph', generalTraces.concat(autoTraces, teleTraces), layout, config);
	}
</script>